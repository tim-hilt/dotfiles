
#+TITLE: Emacs Configuration File
#+AUTHOR: Tim Hilt
#+DATE: 11.10.2019
#+STARTUP: content

* Intro

This is my personal ~.emacs~. Below you can see almost all of the settings, 
that i've applied to my Emacs configuration. I've rewritten my configuration, 
because i deleted the previous one. This is the reason why you can read this.
I decided to backup and publish my configuration for Emacs as a backup for myself
but also for giving back to the community that this config is built on. I hope to 
educate and benefit a few users on the way.

The last section contains a /TODO/-list with features that i wish to implement, as 
well as a time stamp that contains when the feature was added to the list and when 
it was implemented.

* Table of contents                                                 :TOC:
- [[#intro][Intro]]
- [[#bootstrap][Bootstrap]]
  - [[#defaults][Defaults]]
  - [[#own-functions][Own functions]]
  - [[#modify-keybindings][Modify Keybindings]]
  - [[#faces][Faces]]
- [[#emacs-integrated-major-modes][Emacs integrated major-modes]]
  - [[#org-mode][Org-Mode]]
  - [[#dired][Dired]]
- [[#packages][Packages]]
  - [[#init][Init]]
  - [[#gui][GUI]]
  - [[#editor-enhancements][Editor enhancements]]
  - [[#snippets-and-autocomplete][Snippets and Autocomplete]]
  - [[#languages][Languages]]
  - [[#version-control][Version Control]]
- [[#wish-list][Wish-list]]
  - [[#cancelled-close-magit-buffer-with-c-x-k][CANCELLED Close Magit Buffer with C-x k]]
  - [[#sudo-edit][sudo-edit]]
  - [[#m-t-for-alacritty][M-t for alacritty&]]
  - [[#dont-respect--and--in-counsel][don't respect . and .. in counsel]]
  - [[#cancelled-resize-font-with-c--c--][CANCELLED Resize Font with C-+ C--]]
  - [[#visual-regexp--steroids][visual-regexp/ -steroids]]
  - [[#expand-region][Expand-region]]
  - [[#multiple-cursors][Multiple cursors]]
  - [[#run-python-with-c-c-c-a][Run python with C-c C-a]]
  - [[#cursor-jumps-around-when-writing-use-package][Cursor jumps around when writing "use-package"]]
  - [[#save-and-reload-config-file-with-c-c-r][Save and reload config-file with C-c r]]
  - [[#correct-highlight-color-in-ivy][Correct highlight-color in ivy]]
  - [[#digestif-errors-when-c-w-or-c-k][Digestif errors when C-w or C-k]]
  - [[#double-pressing--or-_-in-auctex-inserts-_-or--respectively][Double pressing ~^~ or ~_~ in AucTeX inserts ~_{$}~ or ~^{$}~ respectively]]
  - [[#configure-visual-regexp-steroids-correctly][Configure visual regexp steroids correctly]]

* Bootstrap

** Defaults

#+BEGIN_SRC emacs-lisp
  (when window-system
    (blink-cursor-mode 0)                           ; Disable the cursor blinking
    (scroll-bar-mode 0)                             ; Disable the scroll bar
    (tool-bar-mode 0)                               ; Disable the tool bar
    (menu-bar-mode 0)                               ; Disable the menu bar
    (tooltip-mode 0))                               ; Disable the tooltips

  (setq-default
   auto-window-vscroll nil                          ; Lighten vertical scroll
   confirm-kill-emacs 'yes-or-no-p                  ; Confirm before exiting Emacs
   cursor-in-non-selected-windows nil               ; Hide the cursor in inactive windows
   fill-column 80                                   ; Set width for automatic line breaks
   indent-tabs-mode nil                             ; Stop using tabs to indent
   tab-width 4                                      ; Set width for tabs
   inhibit-startup-screen t                         ; Disable start-up screen
   mouse-yank-at-point t                            ; Yank at point rather than pointer
   ns-use-srgb-colorspace nil                       ; Don't use sRGB colors
   scroll-conservatively most-positive-fixnum       ; Always scroll by one line
   scroll-margin 10                                 ; Add a margin when scrolling vertically
   select-enable-clipboard t                        ; Merge system's and Emacs' clipboard
   sentence-end-double-space nil                    ; End a sentence after a dot and a space
   show-trailing-whitespace nil                     ; Display trailing whitespaces
   split-height-threshold nil                       ; Disable vertical window splitting
   split-width-threshold nil                        ; Disable horizontal window splitting
   uniquify-buffer-name-style 'forward              ; Uniquify buffer names
   window-combination-resize t                      ; Resize windows proportionally
   ring-bell-function 'ignore                       ; Disable annoying bell sound
   x-stretch-cursor t)                              ; Stretch cursor to the glyph width

  (fset 'yes-or-no-p 'y-or-n-p)                     ; Replace yes/no prompts with y/n
  (global-subword-mode 1)                           ; Iterate through CamelCase words
  (set-default-coding-systems 'utf-8)               ; Default to utf-8 encoding
  (show-paren-mode 1)                               ; Show matching char
  (electric-pair-mode 1)                            ; Insert matching character
  (add-to-list
   'display-buffer-alist
   (cons "\\*Async Shell Command\\*.*"
         (cons #'display-buffer-no-window nil)))    ; Don't open new Buffer when shell-command was run
  (server-start)                                    ; Start server when opening, so that ranger can open a file
  (global-hl-line-mode 1)                           ; Highlight the current line
  (global-visual-line-mode t)                       ; Wrap lines in every case, also when using org-mode. Messes up tables though.

  ;; Changes C-w and M-w to Kill/Copy whole line, if no region is active
  (defadvice kill-region (before slick-cut activate compile)
    "When called interactively with no active region, kill a single line instead."
    (interactive
     (if mark-active
         (list (region-beginning) (region-end))
       (list (line-beginning-position) (line-beginning-position 2)))))

  (defadvice kill-ring-save (before slick-copy activate compile)
    "When called interactively with no active region, copy a single line instead."
    (interactive
     (if mark-active
         (list (region-beginning) (region-end))
       (message "Copied line")
       (list (line-beginning-position) (line-beginning-position 2)))))
  (setq auto-save-default nil)                      ; Disable Auto-Saving
  (setq make-backup-files nil)                      ; Disable Backups
#+END_SRC

** Own functions

#+BEGIN_SRC emacs-lisp
  (defun my-run-python ()
    (interactive)
    (shell-command
     (concat
      "alacritty -e ipython -i "
      (buffer-file-name) "&")))

  (defun my-compile-pandoc ()
    (interactive)
    (shell-command
     (concat
      "pandoc "
      (file-name-sans-extension (buffer-file-name))
      ".md -o "
      (file-name-sans-extension (buffer-file-name))
      ".pdf")))
#+END_SRC

** Modify Keybindings

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x k")                     ; Kill current buffer without asking for confirmation
                  'kill-current-buffer)
  (global-set-key (kbd "C-c e")                     ; Opens the Config File for editing
                  (lambda ()
                    (interactive)
                    (find-file "~/.emacs.d/README.org")))
  (global-set-key (kbd "C-c r")                     ; Reloads init.el without having to restart Emacs
                  (lambda ()
                    (interactive)
                    (save-buffer "README.org")
                    (load-file user-init-file)))
  (global-set-key (kbd "C-x 2")                     ; Cursor follows, when window is split!
                  (lambda ()
                    (interactive)
                    (split-window-vertically)
                    (other-window 1)))
  (global-set-key (kbd "C-x 3")
                  (lambda ()
                    (interactive)
                    (split-window-horizontally)
                    (other-window 1)))
  (global-set-key (kbd "C-a")
                  'back-to-indentation)
  (global-set-key (kbd "M-RET")
                  (lambda ()
                    (interactive)
                    (shell-command "alacritty&")))
  (require 'python)
  (define-key python-mode-map
    (kbd "C-c C-a")
    (lambda ()
      (interactive)
      (shell-command
       (concat
        "alacritty -e ipython -i "
        (buffer-file-name) "&"))))

  (require 'markdown-mode)
  (define-key markdown-mode-map
    (kbd "C-c C-a")
    (lambda ()
      (interactive)
      (shell-command
       (concat
        "pandoc "
        (file-name-sans-extension (buffer-file-name))
        ".md -o "
        (file-name-sans-extension (buffer-file-name))
        ".pdf"))))
#+END_SRC

** Faces

#+BEGIN_SRC emacs-lisp

#+END_SRC

* Emacs integrated major-modes

** Org-Mode

#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook 'org-indent-mode)        ; Indent Org-Mode-Structure
  (add-to-list 'org-structure-template-alist        ; Template for emacs-lisp Codeblocks
               '("el" "#+BEGIN_SRC emacs-lisp\n?\n#+END_SRC"))
  (setq org-todo-keywords
        '((sequence "TODO" "|" "DONE" "CANCELLED(c@)")))
#+END_SRC

** Dired

#+BEGIN_SRC emacs-lisp
  (put 'dired-find-alternate-file 'disabled nil)    ; disables warning
  (with-eval-after-load 'dired
    (define-key dired-mode-map (kbd "RET")
      'dired-find-alternate-file)                     ; was dired-advertised-find-file
    (define-key dired-mode-map (kbd "^")              ; was dired-up-directory
      (lambda ()
        (interactive)
        (find-alternate-file ".."))))
  (global-set-key (kbd "C-x d") 'dired-jump)        ; Open dired in current dir
#+END_SRC

* Packages
** Init

The following is used to initialize the package-repository (MELPA)

#+BEGIN_SRC emacs-lisp
  (require 'package)
  (let* ((no-ssl (and (memq system-type '(windows-nt ms-dos))
                      (not (gnutls-available-p))))
         (proto (if no-ssl "http" "https")))
    (when no-ssl
      (warn "\
  Your version of Emacs does not support SSL connections,
  which is unsafe because it allows man-in-the-middle attacks.
  There are two things you can do about this warning:
  1. Install an Emacs version that does support SSL and be safe.
  2. Remove this warning from your init file so you won't see it again."))
    ;; Comment/uncomment these two lines to enable/disable MELPA and MELPA Stable as desired
    (add-to-list 'package-archives (cons "melpa" (concat proto "://melpa.org/packages/")) t)
    ;;(add-to-list 'package-archives (cons "melpa-stable" (concat proto "://stable.melpa.org/packages/")) t)
    (when (< emacs-major-version 24)
      ;; For important compatibility libraries like cl-lib
      (add-to-list 'package-archives (cons "gnu" (concat proto "://elpa.gnu.org/packages/")))))
  (package-initialize)
#+END_SRC

*** Use-Package

#+BEGIN_SRC emacs-lisp
  (require 'use-package-ensure)
  (setq use-package-always-ensure t)                ; Always apply :ensure t - Option when declaring a package via use-package
#+END_SRC

** GUI

*** Themes

The Doom-Themes are kind of the state of the art in stylish and modern Emacs-Themes. I'm using ~doom-molokai~ for consistency with my setup.

#+BEGIN_SRC emacs-lisp
  (use-package doom-themes
    :init
     ;; Global settings (defaults)
    (setq doom-themes-enable-bold t                 ; if nil, bold is universally disabled
          doom-themes-enable-italic t)              ; if nil, italics is universally disabled
    :config
    ;; Load the theme (doom-one, doom-molokai, etc); keep in mind that each theme
    ;; may have their own settings.
    (load-theme 'doom-molokai t)

    ;; Enable flashing mode-line on errors
    (doom-themes-visual-bell-config)

    ;; Enable custom neotree theme (all-the-icons must be installed!)
    (doom-themes-neotree-config)

    ;; or for treemacs users
    (setq doom-themes-treemacs-theme "doom-colors") ; use the colorful treemacs theme
    (doom-themes-treemacs-config)

    ;; Corrects (and improves) org-mode's native fontification.
    (doom-themes-org-config))
#+END_SRC

*** Org-Bullets

The ~org-bullets~-package replaces the standard Stars of headings in org-mode by Unicode-Bullets.

#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :hook
    (org-mode . (lambda () (org-bullets-mode 1))))
#+END_SRC

*** org-toc-mode

Adds a table of contents at the top of an org-file

#+BEGIN_SRC emacs-lisp
  (use-package toc-org
    :hook
    (org-mode . toc-org-mode))
#+END_SRC

*** Modernizing setup

The following packages just inherently make emacs look more polished and modern.

**** all-the-icons

Inserts Unicode symbols in locations like the menubar or the dashboard

#+BEGIN_SRC emacs-lisp
  (use-package all-the-icons)
#+END_SRC

**** doom-modeline

Better Modeline that fits well with the theme

#+BEGIN_SRC emacs-lisp
  (use-package doom-modeline
    :hook (after-init . doom-modeline-mode))
#+END_SRC

**** dashboard

A welcome screen that shows startup-info and other stuff

#+BEGIN_SRC emacs-lisp
  (use-package dashboard
    :init
    (setq dashboard-banner-logo-title "Hello Master. I'm here to serve you.")
    (setq dashboard-startup-banner "~/.emacs.d/emacslogo.png")
    (setq dashboard-center-content t)
    (setq dashboard-show-shortcuts t)
    (setq dashboard-set-heading-icons t)
    (setq dashboard-set-file-icons t)
    (setq dashboard-set-init-info t)
    :config
    (dashboard-setup-startup-hook))
#+END_SRC

** Editor enhancements

*** Ivy


The following packages are a plug-in-replacement for standard Emacs-Functions, that deal with things outside the buffer-window like finding a string in the buffer, opening an external file, switching buffers or executing commands.

#+BEGIN_SRC emacs-lisp
  (use-package swiper
    :bind ("C-s" . swiper))

  (use-package ivy
    :init
    (setq ivy-use-virtual-buffers t)
    (setq enable-recursive-minibuffers t)
    (setq ivy-count-format "(%d/%d) ")
    (setq ivy-initial-inputs-alist nil)
    (setq ivy-extra-directories ())
    :config
    (ivy-mode 1)
    :bind
    (:map ivy-minibuffer-map
          ("RET" . ivy-alt-done)))

  (use-package counsel
    :init
    (setq counsel-find-file-ignore-regexp "\\(?:\\`[.]\\)")
    :bind
    ("M-x" . counsel-M-x)
    ("C-x C-f" . counsel-find-file))
#+END_SRC

*** Rainbow-delimiters

When working with a lot of brackets, parens and alike you can quickly loose track over which paren is the correct one. ~Rainbow-delimiters~ solves this problem, by coloring every paren-pair individually.

#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))
#+END_SRC

*** Hungry delete

Deletes a bunch of whitespace at once

#+BEGIN_SRC emacs-lisp
  (use-package hungry-delete
    :config (global-hungry-delete-mode))
#+END_SRC

*** Sudo-edit

Allows the user to edit files with root-privileges

#+BEGIN_SRC emacs-lisp
  (use-package sudo-edit)
#+END_SRC

*** Visual-regexp

Helps the user to replace a pattern of text and visualizes the input-pattern. ~visual-regexp-steroids~ adds the ability to use Python- and PC-Regex.

#+BEGIN_SRC emacs-lisp
  (use-package visual-regexp
    :bind
    ("C-x C-r" . 'vr/query-replace))

  (use-package visual-regexp-steroids
    :init
    (setq vr/engine 'pcre2el))
#+END_SRC

*** Expand-region

Allows the user to expand the marked region inside of paired delimiters.

#+BEGIN_SRC emacs-lisp
  (use-package expand-region
    :bind
    ("C-." . 'er/expand-region)
    ("C-:" . 'er/contract-region))
#+END_SRC

*** Multiple cursors

Pretty much selve explanatory; adds additional cursors to words/lines

#+BEGIN_SRC emacs-lisp
  (use-package multiple-cursors
    :bind
    ("M-SPC" . mc/mark-next-like-this))
#+END_SRC

*** which-key

#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :config
    (which-key-mode))
#+END_SRC

*** Disable-mouse-mode

#+BEGIN_SRC emacs-lisp
  (use-package disable-mouse
    :config
    (global-disable-mouse-mode))
#+END_SRC

** Snippets and Autocomplete

*** Yasnippet

Yasnippet is a package, that let's you insert larger Code-Snippets by typing a prefix and evaluating it with <TAB>.

#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :hook
    (prog-mode . yas-minor-mode))

  (use-package yasnippet-snippets)
#+END_SRC

*** Company-Mode

Company-Mode is a Completion-Frontend

#+BEGIN_SRC emacs-lisp
  (use-package company
    :bind
    (:map company-active-map
          ("TAB" . company-complete-selection)
          ([tab] . company-complete-selection)
          ("<right>" . company-complete-common)
          ("C-n" . 'company-select-next)
          ("C-p" . 'company-select-previous))
    :hook
    (prog-mode . company-mode)
    :custom
    (company-minimum-prefix-length 1)
    (company-tooltip-align-annotations t))
#+END_SRC

** Languages

*** Lsp-Mode

LSP is short for "Language-Server-Protocol". It attaches to a running language-server, that is configured outside of Emacs.

#+BEGIN_SRC emacs-lisp
  (use-package lsp-mode
    :hook 
    (python-mode . lsp)
    ;; (LaTeX-mode . lsp)
    :commands lsp
    :bind
    (:map lsp-mode-map
          (([f12] . 'lsp-find-definition)
           ("C-<f12>" . 'lsp-find-implementation)
           ("M-?". 'lsp-describe-thing-at-point)
           ("M-." . 'lsp-find-references)
           ("C-c C-r f" . 'lsp-format-buffer))))
  ;; Doesn't play well unfortunately
  ;; (when (executable-find "ipython")                 ;; Not related to the package, sets python interpreter to ipython
  ;;   (setq python-shell-interpreter "ipython"))
#+END_SRC

**** Company-Lsp

LSP-Backend for Company-Mode

#+BEGIN_SRC emacs-lisp
  (use-package company-lsp
    :config
    (push 'company-lsp company-backends))
#+END_SRC

*** LaTeX

#+BEGIN_SRC emacs-lisp
  (use-package tex
    :ensure auctex
    :defer t
    :init
    (setq TeX-electric-math (cons "\\(" "\\)"))
    (setq LaTeX-electric-left-right-brace t)
    (setq TeX-source-correlate-method 'synctex)
    (setq TeX-source-correlate-start-server t)
    (setq TeX-save-query nil)
    (setq-default TeX-engine 'xetex)
    (setq-default TeX-PDF-mode t)
    :config
    (TeX-source-correlate-mode)
    (add-to-list 'TeX-view-program-selection
                 '(output-pdf "Zathura")))
#+END_SRC

*** Julia

#+BEGIN_SRC emacs-lisp
  (use-package julia-mode)
#+END_SRC

*** Matlab

#+BEGIN_SRC emacs-lisp
  ;; (use-package matlab-mode)
#+END_SRC

** Version Control

*** Magit

Magit is a wrapper and an interface around git that makes version control in Emacs a whole lot easier than anywhere else

#+BEGIN_SRC emacs-lisp
  (use-package magit
    :bind ("C-x g" . magit-status))
#+END_SRC

* Wish-list
:PROPERTIES:
:LOGGING:  TODO(!) DONE(!) CANCELLED(c@)
:END:

** CANCELLED Close Magit Buffer with C-x k
- State "CANCELLED"  from "DONE"       [2019-10-18 Fri 23:01] \\
  You can also just type "q" to call ~magit-bury-buffer~ and the buffer will be hidden. Should this come up again, one can look at [[http://manuel-uberti.github.io/emacs/2018/02/17/magit-bury-buffer/][Manuel Uebertis Blog-post]] concerning the theme.
- State "TODO"       from              [2019-10-18 Fri 23:01]
** DONE sudo-edit
- State "DONE"       from "TODO"       [2019-10-18 Fri 23:20]
- State "TODO"       from              [2019-10-18 Fri 22:49]
** DONE M-t for alacritty&
- State "DONE"       from "TODO"       [2019-10-18 Fri 22:49]
- State "TODO"       from              [2019-10-18 Fri 22:49]
** DONE don't respect . and .. in counsel
- State "DONE"       from "TODO"       [2019-10-18 Fri 22:57]
- State "TODO"       from              [2019-10-18 Fri 22:54]
** CANCELLED Resize Font with C-+ C--
- State "CANCELLED"  from "TODO"       [2019-10-18 Fri 23:55] \\
  Possible with ~C-x C-+~, ~C-x C--~ and resetting with ~C-x C-0~
- State "TODO"       from              [2019-10-18 Fri 22:49]
** DONE visual-regexp/ -steroids
- State "DONE"       from "TODO"       [2019-10-19 Sat 00:04]
- State "TODO"       from              [2019-10-18 Fri 23:11]
** DONE Expand-region
- State "DONE"       from "TODO"       [2019-10-19 Sat 00:09]
- State "TODO"       from              [2019-10-18 Fri 22:49]
** DONE Multiple cursors
- State "DONE"       from "TODO"       [2019-10-19 Sat 00:21]
- State "TODO"       from              [2019-10-18 Fri 23:34]

** DONE Run python with C-c C-a
- State "DONE"       from "TODO"       [2019-10-29 Tue 17:23]
- State "TODO"       from "TODO"       [2019-10-29 Tue 17:22]
- State "TODO"       from              [2019-10-26 Sat 08:19]
** TODO Cursor jumps around when writing "use-package"
- State "TODO"       from              [2019-10-26 Sat 08:19]
** DONE Save and reload config-file with C-c r
- State "DONE"       from "TODO"       [2019-10-29 Tue 17:04]
- State "TODO"       from              [2019-10-26 Sat 08:20]
** TODO Correct highlight-color in ivy
- State "TODO"       from              [2019-10-26 Sat 10:54]
** TODO Digestif errors when C-w or C-k
- State "TODO"       from              [2019-10-26 Sat 12:16]
** TODO Double pressing ~^~ or ~_~ in AucTeX inserts ~_{$}~ or ~^{$}~ respectively
- State "TODO"       from              [2019-10-30 Wed 07:56]
** TODO Configure visual regexp steroids correctly
- State "TODO"       from              [2019-11-11 Mon 07:48]
